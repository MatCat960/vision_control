<?xml version="1.0"?>
<launch>
	<arg name="quad_name" default="hummingbird" />
	<arg name="mav_name" default="$(arg quad_name)" />
	<!-- <arg name="enemy_name" default="neo9" /> -->
	<arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
	<arg name="world_name" default="$(find rotors_gazebo)/worlds/tower_obstacles.world" />
	<arg name="use_unity_editor" default="false" />
	<arg name="paused" value="true" />
	<arg name="gui" default="true" />
	<arg name="headless" value="true" />
	<arg name="use_mpc" default="false" />
	<arg name="use_ground_truth" default="true" />
	<arg name="enable_ground_truth" default="true" />
	<arg name="enable_command_feedthrough" default="false" />
	<arg name="custom_models" default="" />
	<arg name="enable_logging" default="false" />
	<arg name="target_model" default="burger" />	

	<arg name="debug" default="false" />
	<arg name="verbose" default="false" />
	<param name="use_sim_time" value="true" />

	<arg name="use_quad1" default="1" />
	<arg name="use_quad2" default="1" />
	<arg name="use_quad3" default="0" />
	<arg name="use_quad4" default="0" />
	<arg name="use_quad5" default="0" />
	<arg name="use_quad6" default="0" />
	<arg name="use_quad7" default="0" />
	<arg name="use_quad8" default="0" />
	<arg name="use_quad9" default="0" />
	<arg name="use_quad10" default="0" />
	<arg name="use_quad11" default="0" />
	<arg name="use_quad12" default="0" />
	<arg name="use_quad13" default="0" />
	<arg name="use_quad14" default="0" />
	<arg name="use_quad15" default="0" />
	<arg name="use_quad16" default="0" />
	<arg name="use_quad17" default="0" />
	<arg name="use_quad18" default="0" />
	<arg name="use_quad19" default="0" />
	<arg name="use_quad20" default="1" />

	<arg name="xt" default="0.0"/>
	<arg name="yt" default="0.0"/>
	<arg name="yawt" default="0.785"/>
	<arg name="x0" default="4.0"/>
	<arg name="y0" default="4.0"/>
	<arg name="x1" default="4.0"/>
	<arg name="y1" default="-4.0"/>
	<arg name="x2" default="-4.0"/>
	<arg name="y2" default="-4.0"/>
	<arg name="x3" default="-4.0"/>
	<arg name="y3" default="4.0"/>
	<arg name="x4" default="-6.0"/>
	<arg name="y4" default="0.0"/>
	<arg name="x5" default="6.0"/>
	<arg name="y5" default="0.0"/>
	<arg name="x6" default="0.0"/>
	<arg name="y6" default="6.0"/>
	<arg name="x7" default="0.0"/>
	<arg name="y7" default="-6.0"/>
	<arg name="x8" default="-3.0"/>
	<arg name="y8" default="-6.0"/>
	<arg name="x9" default="-6.0"/>
	<arg name="y9" default="-3.0"/>
	<arg name="x10" default="0.5"/>
	<arg name="y10" default="0.5"/>
	<arg name="x11" default="-2.0"/>
	<arg name="y11" default="0.0"/>
	<arg name="x12" default="-8.0"/>
	<arg name="y12" default="0.0"/>
	<arg name="x13" default="8.0"/>
	<arg name="y13" default="0.0"/>
	<arg name="x14" default="0.0"/>
	<arg name="y14" default="8.0"/>
	<arg name="x15" default="0.0"/>
	<arg name="y15" default="-8.0"/>
	<arg name="x16" default="-4.0"/>
	<arg name="y16" default="-8.0"/>
	<arg name="x17" default="-8.0"/>
	<arg name="y17" default="-4.0"/>
	<arg name="x18" default="0.0"/>
	<arg name="y18" default="-2.0"/>
	<arg name="x19" default="0.0"/>
	<arg name="y19" default="2.0"/>
	<arg name="th0" default="3.9269"/>
	<arg name="th1" default="2.356"/>
	<arg name="th2" default="0.785"/>
	<arg name="th3" default="0.0"/>
	<arg name="th4" default="0.0"/>
	<arg name="th5" default="0.0"/>
	<arg name="th6" default="0.0"/>
	<arg name="th7" default="0.0"/>
	<arg name="th8" default="0.0"/>
	<arg name="th9" default="0.0"/>
	<arg name="th10" default="0.0"/>
	<arg name="th11" default="0.0"/>
	<arg name="th12" default="0.0"/>
	<arg name="th13" default="0.0"/>
	<arg name="th14" default="0.0"/>
	<arg name="th15" default="0.0"/>
	<arg name="th16" default="0.0"/>
	<arg name="th17" default="0.0"/>
	<arg name="th18" default="0.0"/>
	<arg name="th19" default="0.0"/>
	


	<!-- Gazebo stuff to spawn the world ! -->
	<env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models:$(arg custom_models)" />
	<env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models" />
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="$(arg world_name)" />
		<arg name="debug" value="$(arg debug)" />
		<arg name="paused" value="$(arg paused)" />
		<arg name="gui" value="$(arg gui)" />
		<arg name="headless" value="$(arg headless)" />
		<arg name="verbose" value="$(arg verbose)" />
		<!-- <arg name="z" value="-1000.0"/> -->
	</include>


	<!-- ================================================  Spawn the target ================================================  -->
<group ns="target">
	<param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3cam_$(arg target_model).urdf.xacro" />

  <node pkg="gazebo_ros" type="spawn_model" name="spawn_urdf" args="-urdf -model turtlebot3_$(arg target_model) -x $(arg xt) -y $(arg yt) -Y $(arg yawt) -param robot_description"/>
</group>

<!-- ======== OBSTACLES =========-->
<include file="$(find formation_control)/launch/obstacles.launch" />

<include file="$(find formation_control)/launch/supervisor.launch" />

<!-- ================================================  Spawn the quadrotor ================================================  -->
<group if="$(arg use_quad1)" ns="$(arg mav_name)1">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)1" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)1" />
		<arg name="x" value="$(arg x1)" />
		<arg name="y" value="$(arg y1)" />
		<arg name="yaw" value="$(arg th1)" />
	</include>
</group>
<group if="$(arg use_quad2)" ns="$(arg mav_name)2">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)2" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)2" />
		<arg name="x" value="$(arg x2)" />
		<arg name="y" value="$(arg y2)" />
		<arg name="yaw" value="$(arg th2)" />
	</include>
</group>
<group if="$(arg use_quad3)" ns="$(arg mav_name)">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)3" />
		<arg name="x" value="$(arg x3)" />
		<arg name="y" value="$(arg y3)" />
		<arg name="yaw" value="$(arg th3)" />
	</include>
</group>
<group if="$(arg use_quad4)" ns="$(arg mav_name)4">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)4" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)4" />
		<arg name="x" value="$(arg x4)" />
		<arg name="y" value="$(arg y4)" />
		<arg name="yaw" value="$(arg th4)" />
	</include>
</group>
<group if="$(arg use_quad5)" ns="$(arg mav_name)5">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)5" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)5" />
		<arg name="x" value="$(arg x5)" />
		<arg name="y" value="$(arg y5)" />
		<arg name="yaw" value="$(arg th5)" />
	</include>
</group>
<group if="$(arg use_quad6)" ns="$(arg mav_name)6">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)6" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)6" />
		<arg name="x" value="$(arg x6)" />
		<arg name="y" value="$(arg y6)" />
		<arg name="yaw" value="$(arg th6)" />
	</include>
</group>
<group if="$(arg use_quad7)" ns="$(arg mav_name)7">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)7" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)7" />
		<arg name="x" value="$(arg x7)" />
		<arg name="y" value="$(arg y7)" />
		<arg name="yaw" value="$(arg th7)" />
	</include>
</group>
<group if="$(arg use_quad8)" ns="$(arg mav_name)8">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)8" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)8" />
		<arg name="x" value="$(arg x8)" />
		<arg name="y" value="$(arg y8)" />
		<arg name="yaw" value="$(arg th8)" />
	</include>
</group>
<group if="$(arg use_quad9)" ns="$(arg mav_name)9">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)9" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)9" />
		<arg name="x" value="$(arg x9)" />
		<arg name="y" value="$(arg y9)" />
		<arg name="yaw" value="$(arg th9)" />
	</include>
</group>
<group if="$(arg use_quad12)" ns="$(arg mav_name)12">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)12" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)12" />
		<arg name="x" value="$(arg x12)" />
		<arg name="y" value="$(arg y12)" />
		<arg name="yaw" value="$(arg th12)" />
	</include>
</group>
<group if="$(arg use_quad10)" ns="$(arg mav_name)10">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)10" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)10" />
		<arg name="x" value="$(arg x10)" />
		<arg name="y" value="$(arg y10)" />
		<arg name="yaw" value="$(arg th10)" />
	</include>
</group>
<group if="$(arg use_quad11)" ns="$(arg mav_name)11">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)11" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)11" />
		<arg name="x" value="$(arg x11)" />
		<arg name="y" value="$(arg y11)" />
		<arg name="yaw" value="$(arg th11)" />
	</include>
</group>
<group if="$(arg use_quad13)" ns="$(arg mav_name)13">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)13" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)13" />
		<arg name="x" value="$(arg x13)" />
		<arg name="y" value="$(arg y13)" />
		<arg name="yaw" value="$(arg th13)" />
	</include>
</group>
<group if="$(arg use_quad14)" ns="$(arg mav_name)14">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)14" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)14" />
		<arg name="x" value="$(arg x14)" />
		<arg name="y" value="$(arg y14)" />
		<arg name="yaw" value="$(arg th14)" />
	</include>
</group>
<group if="$(arg use_quad15)" ns="$(arg mav_name)15">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)15" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)15" />
		<arg name="x" value="$(arg x15)" />
		<arg name="y" value="$(arg y15)" />
		<arg name="yaw" value="$(arg th15)" />
	</include>
</group>
<group if="$(arg use_quad16)" ns="$(arg mav_name)16">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)16" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)16" />
		<arg name="x" value="$(arg x16)" />
		<arg name="y" value="$(arg y16)" />
		<arg name="yaw" value="$(arg th16)" />
	</include>
</group>
<group if="$(arg use_quad17)" ns="$(arg mav_name)17">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)17" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)17" />
		<arg name="x" value="$(arg x17)" />
		<arg name="y" value="$(arg y17)" />
		<arg name="yaw" value="$(arg th17)" />
	</include>
</group>
<group if="$(arg use_quad18)" ns="$(arg mav_name)18">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)18" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)18" />
		<arg name="x" value="$(arg x18)" />
		<arg name="y" value="$(arg y18)" />
		<arg name="yaw" value="$(arg th18)" />
	</include>
</group>
<group if="$(arg use_quad19)" ns="$(arg mav_name)19">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)19" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)19" />
		<arg name="x" value="$(arg x19)" />
		<arg name="y" value="$(arg y19)" />
		<arg name="yaw" value="$(arg th19)" />
	</include>
</group>
<group if="$(arg use_quad20)" ns="$(arg mav_name)0">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)0" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)0" />
		<arg name="x" value="$(arg x0)" />
		<arg name="y" value="$(arg y0)" />
		<arg name="yaw" value="$(arg th0)" />
	</include>
</group>
  <!-- ================================================  RPG stuff 1 ================================================  -->

<group if="$(arg use_quad1)" ns="$(arg quad_name)1">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_1" output="screen"/> -->
</group>
  <!-- ================================================  RPG stuff 2 ================================================  -->

<group if="$(arg use_quad2)" ns="$(arg quad_name)2">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_2" output="screen" ns="$arg quad_nae"> -->
</group>
  <!-- ================================================  RPG stuff 3 ================================================  -->

<group if="$(arg use_quad3)" ns="$(arg mav_name)">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<!-- <rosparam file="$(find state_predictor)/parameters/$(arg mav_name).yaml" /> -->
		<rosparam file="$(find state_predictor)/parameters/default.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>

<!-- ================================================  RPG stuff 4 ================================================  -->

<group if="$(arg use_quad4)" ns="$(arg mav_name)4">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<!-- <rosparam file="$(find state_predictor)/parameters/$(arg mav_name).yaml" /> -->
		<rosparam file="$(find state_predictor)/parameters/default.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_1" output="screen"/> -->
</group>
  <!-- ================================================  RPG stuff 5 ================================================  -->

<group if="$(arg use_quad5)" ns="$(arg quad_name)5">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_2" output="screen" ns="$arg quad_nae"> -->
</group>
  <!-- ================================================  RPG stuff 6 ================================================  -->

<group if="$(arg use_quad6)" ns="$(arg quad_name)6">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>
  <!-- ================================================  RPG stuff 7 ================================================  -->

<group if="$(arg use_quad7)" ns="$(arg quad_name)7">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>
  <!-- ================================================  RPG stuff 8 ================================================  -->

<group if="$(arg use_quad8)" ns="$(arg quad_name)8">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>
  <!-- ================================================  RPG stuff 9 ================================================  -->

<group if="$(arg use_quad9)" ns="$(arg quad_name)9">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>
  <!-- ================================================  RPG stuff 12 ================================================  -->

<group if="$(arg use_quad10)" ns="$(arg quad_name)10">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>
  <!-- ================================================  RPG stuff 12 ================================================  -->

<group if="$(arg use_quad11)" ns="$(arg quad_name)11">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>
  <!-- ================================================  RPG stuff 12 ================================================  -->

<group if="$(arg use_quad12)" ns="$(arg quad_name)12">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>

<!-- ================================================  RPG stuff 12 ================================================  -->

<group if="$(arg use_quad13)" ns="$(arg quad_name)13">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>
  <!-- ================================================  RPG stuff 12 ================================================  -->

<group if="$(arg use_quad14)" ns="$(arg quad_name)14">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>
  <!-- ================================================  RPG stuff 12 ================================================  -->

<group if="$(arg use_quad15)" ns="$(arg quad_name)15">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>

<!-- ================================================  RPG stuff 12 ================================================  -->

<group if="$(arg use_quad16)" ns="$(arg quad_name)16">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>
  <!-- ================================================  RPG stuff 12 ================================================  -->

<group if="$(arg use_quad17)" ns="$(arg quad_name)17">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>
  <!-- ================================================  RPG stuff 12 ================================================  -->

<group if="$(arg use_quad18)" ns="$(arg quad_name)18">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>

<!-- ================================================  RPG stuff 12 ================================================  -->

<group if="$(arg use_quad19)" ns="$(arg quad_name)19">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>
  <!-- ================================================  RPG stuff 12 ================================================  -->

<group if="$(arg use_quad20)" ns="$(arg quad_name)0">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>




  <!-- ================================================  ARMING + HOVERING mav 1 ================================================  -->
<group if="$(arg use_quad1)" ns="$(arg quad_name)1">
	<node pkg="fow_control" type="fow_control_hover" name="hover_node" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)1/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)1/autopilot/start" />
	</node>
</group>

  <!-- ================================================  ARMING + HOVERING mav 2 ================================================  -->
<group if="$(arg use_quad2)" ns="$(arg quad_name)2">
	<node pkg="fow_control" type="fow_control_hover" name="hover_node" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)2/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)2/autopilot/start" />
	</node>
</group>

  <!-- ================================================  ARMING + HOVERING mav 3 ================================================  -->
<group if="$(arg use_quad3)" ns="$(arg mav_name)">
	<node pkg="fow_control" type="fow_control_hover" name="hover_node" output="screen">
		<remap from="/bridge/arm" to="/$(arg mav_name)/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg mav_name)/autopilot/start" />
	</node>
</group>

  <!-- ================================================  ARMING + HOVERING mav 4 ================================================  -->
<group if="$(arg use_quad4)" ns="$(arg mav_name)4">
	<node pkg="fow_control" type="fow_control_hover" name="hover_node" output="screen">
		<remap from="/bridge/arm" to="/$(arg mav_name)4/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg mav_name)4/autopilot/start" />
	</node>
</group>

  <!-- ================================================  ARMING + HOVERING mav 5 ================================================  -->
<group if="$(arg use_quad5)" ns="$(arg quad_name)5">
	<node pkg="fow_control" type="fow_control_hover" name="hover_node" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)5/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)5/autopilot/start" />
	</node>
</group>

  <!-- ================================================  ARMING + HOVERING mav 6 ================================================  -->
<group if="$(arg use_quad6)" ns="$(arg quad_name)6">
	<node pkg="fow_control" type="fow_control_hover" name="hover_node" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)6/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)6/autopilot/start" />
	</node>
</group>

  <!-- ================================================  ARMING + HOVERING mav 7 ================================================  -->
<group if="$(arg use_quad7)" ns="$(arg quad_name)7">
	<node pkg="fow_control" type="fow_control_hover" name="hover_node" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)7/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)7/autopilot/start" />
	</node>
</group>

  <!-- ================================================  ARMING + HOVERING mav 8 ================================================  -->
<group if="$(arg use_quad8)" ns="$(arg quad_name)8">
	<node pkg="fow_control" type="fow_control_hover" name="hover_node" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)8/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)8/autopilot/start" />
	</node>
</group>

<!-- ================================================  ARMING + HOVERING mav 9 ================================================  -->
<group if="$(arg use_quad9)" ns="$(arg quad_name)9">
	<node pkg="fow_control" type="fow_control_hover" name="hover_node" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)9/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)9/autopilot/start" />
	</node>
</group>

<!-- ================================================  ARMING + HOVERING mav 12 ================================================  -->
<group if="$(arg use_quad12)" ns="$(arg quad_name)12">
	<node pkg="fow_control" type="fow_control_hover" name="hover_node" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)12/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)12/autopilot/start" />
	</node>
</group>

<!-- ================================================  ARMING + HOVERING mav 10 ================================================  -->
<group if="$(arg use_quad10)" ns="$(arg quad_name)10">
	<node pkg="fow_control" type="fow_control_hover" name="hover_node" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)10/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)10/autopilot/start" />
	</node>
</group>

<!-- ================================================  ARMING + HOVERING mav 11 ================================================  -->
<group if="$(arg use_quad11)" ns="$(arg quad_name)11">
	<node pkg="fow_control" type="fow_control_hover" name="hover_node" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)11/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)11/autopilot/start" />
	</node>
</group>

<!-- ================================================  ARMING + HOVERING mav 13 ================================================  -->
<group if="$(arg use_quad13)" ns="$(arg quad_name)13">
	<node pkg="fow_control" type="fow_control_hover" name="hover_node" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)13/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)13/autopilot/start" />
	</node>
</group>

<!-- ================================================  ARMING + HOVERING mav 14 ================================================  -->
<group if="$(arg use_quad14)" ns="$(arg quad_name)14">
	<node pkg="fow_control" type="fow_control_hover" name="hover_node" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)14/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)14/autopilot/start" />
	</node>
</group>

<!-- ================================================  ARMING + HOVERING mav 15 ================================================  -->
<group if="$(arg use_quad15)" ns="$(arg quad_name)15">
	<node pkg="fow_control" type="fow_control_hover" name="hover_node" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)15/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)15/autopilot/start" />
	</node>
</group>


<!-- ================================================  ARMING + HOVERING mav 12 ================================================  -->
<group if="$(arg use_quad16)" ns="$(arg quad_name)16">
	<node pkg="fow_control" type="fow_control_hover" name="hover_node" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)16/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)16/autopilot/start" />
	</node>
</group>

<!-- ================================================  ARMING + HOVERING mav 10 ================================================  -->
<group if="$(arg use_quad17)" ns="$(arg quad_name)17">
	<node pkg="fow_control" type="fow_control_hover" name="hover_node" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)17/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)17/autopilot/start" />
	</node>
</group>

<!-- ================================================  ARMING + HOVERING mav 11 ================================================  -->
<group if="$(arg use_quad18)" ns="$(arg quad_name)18">
	<node pkg="fow_control" type="fow_control_hover" name="hover_node" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)18/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)18/autopilot/start" />
	</node>
</group>

<!-- ================================================  ARMING + HOVERING mav 13 ================================================  -->
<group if="$(arg use_quad19)" ns="$(arg quad_name)19">
	<node pkg="fow_control" type="fow_control_hover" name="hover_node" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)19/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)19/autopilot/start" />
	</node>
</group>

<!-- ================================================  ARMING + HOVERING mav 14 ================================================  -->
<group if="$(arg use_quad20)" ns="$(arg quad_name)0">
	<node pkg="fow_control" type="fow_control_hover" name="hover_node" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)0/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)0/autopilot/start" />
	</node>
</group>





  <!-- ================================================  Flightmare Render ================================================  -->


<!-- RViz -->
<!-- <node type="rviz" name="rviz" pkg="rviz" args="-d $(find swarmros)/rviz/default.rviz" />-->
</launch> 
